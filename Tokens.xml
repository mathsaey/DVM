<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>createLink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>abd4da19657e02a55927f2479fd1fc4bf</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>a5bd8cc014e09436563319444734d28c4</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>a1bb2a201b018c8c28ffba4256245210a</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createChunk</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>ad5c8bcaf3fcb3dea28cbe8558db89667</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DVM_CHUNKS</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>a6d420beb3004da764486ac5f6234451b</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a502b93aec6ea128eea879ba1ade42a1a</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a1a3c3c3603f3af45db8b7079b8a74327</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>af3f1c6df1cac8584b86c763d825d8e43</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>transformNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a726f37313ce3b3d4bd2f31fd6c6f5c5b</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deleteNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>aeccc2a181d4ca275701e9ece1fd160e4</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeOperationLiterals</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a12430b741030fa8bd4efb49fa613fe2f</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loc</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>disc</Scope>
    </TokenIdentifier>
    <Path>namespacedisc.html</Path>
    <Anchor>a514324055e0953215c42fb956b979201</Anchor>
    <DeclaredIn>disc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Anchor>aa3f94e445b385305aec08fcdb27d4838</Anchor>
    <DeclaredIn>compound.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Anchor>abaa9da02d033230b48a6264a16136aa4</Anchor>
    <DeclaredIn>compound.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__COMPOUNDS__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Anchor>af28ac736ed87c38a133b39ea02e6a84c</Anchor>
    <Abstract>Various IGR compound nodes. </Abstract>
    <DeclaredIn>compound.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseEdge</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>aa597fb2db81faf8c1e12026d7e20518f</Anchor>
    <Abstract>Parse an IF1 edge. </Abstract>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>aaf9a955972731c081fc17c330a920f1d</Anchor>
    <Abstract>Parse an IF1 literal. </Abstract>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a051311fc8c586b6cad1793ada5a5b2af</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_src_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a066b507406458804bc4806b95ebaf586</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_srcp_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>ac4ceb75e08df06a6dadeab8a8340946a</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_dst_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a15516e59d14ffd0247e8fa62886020b1</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_dstp_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a89c095f7b55258db64c8df4813ddd38e</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_type_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a7640a51a6213faa18f106a99fa97a4b1</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_dst_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a3202a440e26f85fe996067b0f2ca585a</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_dstp_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a3ce1f894ea62d6564a4479c5a224d60b</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_type_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>ae634a404b821fa406239b477f9a4e26e</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_str_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a86af0a51e11652cb13c20390585ae4cb</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scope</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>aecee912bdfd884cb614c447fe9de0396</Anchor>
    <Abstract>Create a new scope and push it on top of the stack. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scopeCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>abd1a1fc8e610e02b56f4d790233ea5d1</Anchor>
    <Abstract>Create a new compound scope and push it on top of the stack. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>popScope</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>aac5a1b7869d743eb4847013b4c69ec4d</Anchor>
    <Abstract>Remove the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a5e36484cf61edf1ba6dfbafee003449a</Anchor>
    <Abstract>Get the node with label in the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a9cccdfd72ef6b4b8fa3660ed7978a190</Anchor>
    <Abstract>Add node with label to the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a55b1a40c6e420b6d79bde3e6822a42de</Anchor>
    <Abstract>Get the subgraph of the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>ad5fec7a4a795cd16a10ddb7449ad5bf2</Anchor>
    <Abstract>Add a subgraph to the compound scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>adcd9de5718e86ff09b91c19fd6ed8826</Anchor>
    <Abstract>Get the subgraphs. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a8feeb741c1940dce1db9b79f565dc69b</Anchor>
    <Abstract>Are we currently in a compound node? </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>enterComp</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>af8712477c7e3bf73ada87147dd014513</Anchor>
    <Abstract>Enter a compound node. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exitComp</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>ae2e7f9e7868d0f79239cbf22ff2fe837</Anchor>
    <Abstract>Exit a compound node. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>aba754eedd62e71b9a7fab064b9b5bd25</Anchor>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__STACK__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a2ad3e8faf02f03227e8def45f3bdc58e</Anchor>
    <Abstract>A stack with the global scope at the bottom, and the current scope at the top. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__COMP_LEVEL__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a9f1b997df734fc12ee3b1baa21070513</Anchor>
    <Abstract>Keeps track of the level of depth w.r.t. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a507960bf11a92961a199bc75f8526a34</Anchor>
    <Abstract>Parse a standard subgraph. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCompoundSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a974ac871e1fc3b2c8967b6c3e7cdf082</Anchor>
    <Abstract>Parse a subgraph of a compound node. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a3911c6e633459eb847115cc2c64a736d</Anchor>
    <Abstract>Determine which kind of subgraph we are dealing with. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseStandardNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a6c564c1107c93f9e290dfad09c497b2b</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCallNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>ad1b6f67cdde9dc5915aba037a0abef8d</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a3b96a38fd829649d932ae5ec079bd560</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCompoundStart</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a0c84597ede466784e96743d0121eeb15</Anchor>
    <Abstract>Parse the start of a compound node. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCompoundEnd</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>aea7ab4376085489279fbc96c2a487577</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_n_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a5ce12b365485c3e00d367b0bddd0936f</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_n_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a73decdccf71bdf0c1839bd058e4b0498</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_g_type_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a365d1a4f550b72a9b113754235334a28</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_g_name_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a800ddf7df1b2825dff60465490e97fe3</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_cs_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>af90ad934ab28b3b6b72cfee02fb09a3c</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_cs_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a7fed8275b44e110c076c2051f1b7444f</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>ae4d70b66132ee2a0d68ab355faf8f63c</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>adefc35448bb1a14a4e45c33b2a531004</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_len_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>ac4066729f7029261a05f3b1322f4d7b3</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_lis_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a1ff97c082309cfdf10b7536275e80a39</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a713a1927c51880060d46b2110891a75f</Anchor>
    <Abstract>Add a subgraph to the program. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bindName</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a7daf14d676e6a93810df093fd0d5b48f</Anchor>
    <Abstract>Add a subgraph to a given name. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>aa4418c1b490408678b76c17154170b86</Anchor>
    <Abstract>Get a list of all the non-compound subgraphs in the program. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a8bfa02a943148ecfacbcd0afedca711a</Anchor>
    <Abstract>Get a subgraph by name. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__SUBGRAPHS__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>afe7eab2a94fd262b1bb8810624eb3c1e</Anchor>
    <Abstract>All of the functions in the program. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__FUNCTION_NAMES__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a4102493c000554f42f6cf848de690e03</Anchor>
    <Abstract>The function names, combined with the subgraph they map to. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFunction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Anchor>a7adddda9015af7031ebfa41eb0b04af5</Anchor>
    <DeclaredIn>operations.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Anchor>aa87acac587b0fda80a1f2fba3d7574f4</Anchor>
    <DeclaredIn>operations.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_functions</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Anchor>af7fb1f27652afbcfca3791bf35f96fc5</Anchor>
    <DeclaredIn>operations.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ade899f38299109be3e95942f608a0268</Anchor>
    <Abstract>Get a type from the pool. </Abstract>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseType</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ab32c81047066ac3fb6322eb1615a470f</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ad990b1aa923f14f032d458d86ab73928</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a821443db1ae98ccdf9c1f4abd70848a9</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a9f1dde8c89f6ab43798d896bd2a6079f</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_arg_1_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a6597008016eb3161a2886f6d049d409d</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_arg_2_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ac631114265ac5777d595dbd156529121</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_type_codes</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>aad7a624a22149e348c59daaf5cc63857</Anchor>
    <Abstract>The function that is needed to parse a given idx. </Abstract>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_basic_types</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a431d68841a0c6d230973ea8612860003</Anchor>
    <Abstract>Basic type codes and the python types to match them. </Abstract>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_pool</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ab4efb09663f0b4c2caf57fb4c0469a2d</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::Sisal</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_sisal.html</Path>
    <Anchor>a07d185fe199f22e2471104b3d2c81189</Anchor>
    <DeclaredIn>Sisal.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphHeader</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a4bd3bade93d0c9cc2639909fcd69df67</Anchor>
    <Abstract>Add the attributes of the subgraph. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphFooter</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a5baab6aaadcf5140cfbb898db02b05b8</Anchor>
    <Abstract>&amp;quot;close&amp;quot; the subgraph. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>compoundHeader</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ae5e8d3e2913028ae98733ddcf020e92e</Anchor>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>compoundFooter</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ac646de3e1d3a4805bbfd4e57a4c2e1cb</Anchor>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>portString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a5a22fe85fa8282dad19c1b89d9321197</Anchor>
    <Abstract>Get a representation for a port. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ports</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ab79b8194b24dd32372e38dc81ba38699</Anchor>
    <Abstract>String representation of a port list. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputList</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a48a74ea4c04164cae3ea5629cfc36f17</Anchor>
    <Abstract>Get the portlist for the inputs of a node. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputList</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a5a68597ca34591a3d97d7282bfe67872</Anchor>
    <Abstract>Get the portlist for the outputs of a node. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeIdentifier</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a852920d8b1f41945a0507ac7e54e9ab4</Anchor>
    <Abstract>Identifier of the node. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>edgeStr</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a2f144e23d21de41e8dd391dfc6aac7b5</Anchor>
    <Abstract>Convert a connection to a string. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeLabel</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a0ed7e0a8b80f6b70852adf99cd161b0e</Anchor>
    <Abstract>Add the label of the node to the buffer. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeLinks</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a4bf8bc67240f948ad26dc3ccff87cafc</Anchor>
    <Abstract>Add all the outgoing edges of a node to the buffer. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>node</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a2fa4fdf242aff219099986af386e1751</Anchor>
    <Abstract>Write the information of a node to the buffer. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dotHeader</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a7ce9fa8e72127cc7889c1a94afff20fa</Anchor>
    <Abstract>Write general dot information. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dotFooter</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>aaa36857df44a7aaf9eeb95b5966c40a0</Anchor>
    <Abstract>Close the dot graph. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDot</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ad2dcf03200a33c5368bc5ac31bf518e5</Anchor>
    <Abstract>Create the dot string. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dotToFile</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>aa15087bf161d5c705a29e7ab84d9fdf9</Anchor>
    <Abstract>Get the dot representation and write it to a file. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dot</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a849825adcd89144f89c2e7fa6a826052</Anchor>
    <Abstract>Convert the IGR graph to dot, save it, and run dot on this file. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ab3de22a8cb6b97c5257cb23f3078fd74</Anchor>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getKey</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::node</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1node.html</Path>
    <Anchor>a1b8f36b680be632f7fc70930d43afd67</Anchor>
    <Abstract>Generate unique id. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__KEY__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::node</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1node.html</Path>
    <Anchor>abcfb5be08585b7403aaeab935b645d44</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>traverse</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::traverse</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1traverse.html</Path>
    <Anchor>adc3bc5eee2649d3470326bb52ab80759</Anchor>
    <Abstract>Traverse all the nodes in the program. </Abstract>
    <DeclaredIn>traverse.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addOperationInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>aa0358e6c4cd7ce27b25dfa19c7d1f97f</Anchor>
    <Abstract>Add an operation instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a0a9167ffe1bc3f7d778cda3c1c77d334</Anchor>
    <Abstract>Add a sink instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addContextChange</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ade0cb4a02aac6b081a9f3c7108e74b14</Anchor>
    <Abstract>Add a context change instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addContextRestore</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ad150c9d50bdacb978da6423a3316abc4</Anchor>
    <Abstract>Add a context restore instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addStopInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a803785af4adb84dbc665cba281df8aab</Anchor>
    <Abstract>Add a stop instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addDestination</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a56fc7e50cda38141e414895f6b118357</Anchor>
    <Abstract>Add a destination to a given instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ad9b2e735c8964c4efc36149e3863f873</Anchor>
    <Abstract>Add a literal to a given instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ad86476e99dd74e173d5949a6c486a03b</Anchor>
    <Abstract>Start the execution cores. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addData</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a1d75a7ff0a5d7d0ad350455a21bceef2</Anchor>
    <Abstract>Add an external token containing data. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIn</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>aacc1dc1509b580b630738c1c61fa619b</Anchor>
    <Abstract>Return the amount of input the runtime requires. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setIn</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a64a7b5be7fa0e4857117508b808dc889</Anchor>
    <Abstract>Set the amount of inputs that the runtime expects. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPort</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a89956e4c036740132c8cba32795c5d61</Anchor>
    <Abstract>Check the current port of the runtime. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasIn</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a9e050d23df9ad6e1acb5df7006fa45b3</Anchor>
    <Abstract>See if the runtime expects additional input. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Anchor>a8fb37509b863bbe85fce88efe04582db</Anchor>
    <Abstract>Select a backend to use. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Anchor>a41d4b4095b3d47b58a718fed9939d0b4</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backend</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Anchor>a660fca84b9adcb4d5ea328e1de41e36c</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a9c7248fd78783fd6023b426b0df7f2cd</Anchor>
    <Abstract>Select a frontend to use. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a20e80333b9398751e22cc4ca4187a56f</Anchor>
    <Abstract>Convert the given string to IGR. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromFile</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>ab7d150fb7e8fbe8c5916d6e0e0567737</Anchor>
    <Abstract>Convert the contents of a file to IGR. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a61576283eccc9538a7323ca0324e1b89</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a22bc3d2d929d9c4953bcb0d40677cd59</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipLine</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>a6298bf62d1e5ea5855c45dda1c48b3c2</Anchor>
    <Abstract>Skip a line #. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLine</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>a182e348455d64f0dc8f81d88de836811</Anchor>
    <Abstract>Parse a single if1 line. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>adee397a4b0536592fdedbf6fb8eb08b6</Anchor>
    <Abstract>Parse a complete IF1 string. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>abedb1f2799547653a5a1ad2cec9c654a</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__FUNCTIONS__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>a99978b96e45262d698771df96c3ec437</Anchor>
    <Abstract>Parser values and the function to call when they are encountered. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a97236270f5dbabe7399b907178a00d28</Anchor>
    <Abstract>Get a list of all the non-compound subgraphs in the program. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a95a9c96f7f63e643560fae0437e73417</Anchor>
    <Abstract>Get a subgraph by name. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createGeneralSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>aa5e01d9c08014a16c7515ccda09fce12</Anchor>
    <Abstract>Create a new subgraph. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a8d809c5810700d1e88c378e40b949784</Anchor>
    <Abstract>Create a subgraph and add it to the program graph. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createCompoundSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a4f10b5e5d7d19146b2afb083a7248662</Anchor>
    <Abstract>Create a subgraph for a compound node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a27668aa4e23763aa37d853a2e13b4279</Anchor>
    <Abstract>Create a node, add it to it&amp;#39;s subgraph and return it. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createOperationNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>aa19a1174fd67a1b35805b32137b3d8be</Anchor>
    <Abstract>Create an operation node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createCompoundNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>adb4e4303c598be7439365c74b9c3e052</Anchor>
    <Abstract>Create a Compound node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createCallNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>ac8c72c16f2bdae91e9604815dfe7d648</Anchor>
    <Abstract>Create a call node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a7d8963d3f7d865bd914daf40e70e4f6b</Anchor>
    <Abstract>Add a literal to a port. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connect</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a8d4b1dd299b3c727df94aef20c4c31a4</Anchor>
    <Abstract>Connect 2 ports with an implicit edge. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::contextMatcher</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1context_matcher.html</Path>
    <Anchor>a0cd8cef399df55ab3a62938e4b491da1</Anchor>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::dispatcher</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1dispatcher.html</Path>
    <Anchor>ad2e1a103f7b3f1652567c1747b150ddd</Anchor>
    <DeclaredIn>dispatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::instruction</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1instruction.html</Path>
    <Anchor>acb7b0d0df307af5dbac16a6358ec591a</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a50fc28a667ac098318aea1a1c98b4706</Anchor>
    <Abstract>Get a reference to the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a1765945bfc16abcf7ecf4b56c4d5d1ee</Anchor>
    <Abstract>Delete all the contents of the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>adcd75eabf1c237556ef1c8fc10702036</Anchor>
    <Abstract>Get an instruction from the main memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a8b68327efca6249f5bde090d43374d7e</Anchor>
    <Abstract>See if an instruction needs to pass the matcher Instructions that require a context manager are store...</Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>adadafaa74f91e37b9c0d0f7bb51988f2</Anchor>
    <Abstract>Add an instruction to the main memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__MEMORY__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a5b84f450c78cc01448f3e4ec8747c54f</Anchor>
    <Abstract>Main instance of the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a7b2f8d99c507dcb53e31bf8296b8bd69</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addData</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a4fe3e65a2c62930486886a5095446389</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>ad0f367bed031f8b4f82413776061fb30</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__cores__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a25b6674940b07aa06df405848dd9df5c</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__port__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>aa752c279cf56ec5a6ea35d0e09a7253a</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__in__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a878cd578c09376445089f77a7de165c2</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::scheduler</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1scheduler.html</Path>
    <Anchor>a5ea400a0ded1ee3859e42a606c92507d</Anchor>
    <DeclaredIn>scheduler.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>handle_exit</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>a2e32617d77431cc90e14996cd05d3bcd</Anchor>
    <Abstract>Handle an exit signal. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>argParser</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>aa067e7021475dc71ccd9019423b3a7c5</Anchor>
    <Abstract>Bind handle_exit to sigint. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>args</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>a0df66969824d161dbff839bc07aa2d19</Anchor>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>ab12ff8b46e7c77add9ddc198e2a6fbb5</Anchor>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>run</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>a4c5f5cb49eb78f3d7590b7d2d07115dd</Anchor>
    <Abstract>Run DVM on a dis string, with inputs, and return the results. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>ad7747e30f6792420939e7cb9f942d0f1</Anchor>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>path</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>a962c0895671f5ed5463d5b0c17d8a471</Anchor>
    <Abstract>Default dvm path. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cores</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>a2f3589e96060b2ba8b7881f6517c28f4</Anchor>
    <Abstract>Default amount of cores to use. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>logLevel</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>ae31b46dd72807e5a67434feb14bda152</Anchor>
    <Abstract>Default loglevel to use. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setup</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>log</Scope>
    </TokenIdentifier>
    <Path>namespacelog.html</Path>
    <Anchor>a52a782581d935521b9f10662c0b08eb1</Anchor>
    <Abstract>Set up the root logger. </Abstract>
    <DeclaredIn>log.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FORMAT_STR</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>log</Scope>
    </TokenIdentifier>
    <Path>namespacelog.html</Path>
    <Anchor>a980b268fc3ec194b35ea6fa22e3e082e</Anchor>
    <Abstract>String for formatting log records. </Abstract>
    <DeclaredIn>log.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setup</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>log</Scope>
    </TokenIdentifier>
    <Path>namespacelog.html</Path>
    <Anchor>a52a782581d935521b9f10662c0b08eb1</Anchor>
    <Abstract>Set up the root logger. </Abstract>
    <DeclaredIn>log.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Void</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a0347dd8cdda0fb96d131fad5e32ec064</Anchor>
    <Abstract>Return the DVM void type. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Bool</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a24c16658ab2058e0230063b97ee8de09</Anchor>
    <Abstract>Create a DVM Boolean. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Int</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a4e61c994835b8759410a798acbbd8a1e</Anchor>
    <Abstract>Create a DVM Integer. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Float</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ac4513da155bca2064f5e63b8ae9a667f</Anchor>
    <Abstract>Create a DVM Float. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_String</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>af04b34115cdd45ae74ef9eafa0d0dac9</Anchor>
    <Abstract>create a DVM String </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Array</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aed55008480d45b53b15b2725fdb29735</Anchor>
    <Abstract>Create a DVM Array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_tuple</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a6b3709427de8b87be49d3ffcd3f41cb8</Anchor>
    <Abstract>Create a DVM Tuple. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_noOp</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>afb0270ed66574a9cc50b2b27bdbaf85c</Anchor>
    <Abstract>Do nothing. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_isVoid</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a241533cdc1e8aabdc5d4914b84659c24</Anchor>
    <Abstract>See if the element is void. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_equals</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a598a792f4f27f5f303db9bd1fe54b8cf</Anchor>
    <Abstract>Check if 2 elements are equal. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_notEqual</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a02ebd57a3d4c03dc22899c81d710cebf</Anchor>
    <Abstract>Check if 2 elements are not equal. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_and</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ad9af42003b8677c6e6ecfe3545dcfabc</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_or</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a487ae9e928c22ec16df1269cde8f6083</Anchor>
    <Abstract>Logical Or. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_xor</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ac379fbaba75e081ea9b8a715c711353b</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_not</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a1934feed6f04c3d65363f4bdab42248b</Anchor>
    <Abstract>Negation. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_neg</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a833d2b610bb87309d5f921a66b65349c</Anchor>
    <Abstract>Negation. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_add</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a02049f1feebcffefe7962b4fb083d6c7</Anchor>
    <Abstract>Addition. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_sub</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ab456d991b7ede8c8d839657265d4bf9e</Anchor>
    <Abstract>Subtraction. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_mul</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a0963bf8d2e39650c9beb004640ed4032</Anchor>
    <Abstract>Multiplication. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_div</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>adaa5098622415dfccbf95a6fef897c6e</Anchor>
    <Abstract>Subtraction. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_floor</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a1984781826a8f1c4e277cade7609fd2d</Anchor>
    <Abstract>Round down. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_ceil</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a0d6c1c7fbb5d0de60bdc4d73c2c3c57e</Anchor>
    <Abstract>Round up. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_min</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>af35b6b8d5fd0d2f374885917968a5af9</Anchor>
    <Abstract>Maximum. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_max</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>abb4478539499c3865ea8ab4c637c1357</Anchor>
    <Abstract>Minimum. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_less</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a47b86188716c4b89474a9f61e9723f6b</Anchor>
    <Abstract>Smaller than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_more</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ad363436b9b598e2e6e50e8a4642fcdd5</Anchor>
    <Abstract>Greater than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_less_eq</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a52843e68814acab8de57cb3c7fadc938</Anchor>
    <Abstract>Smaller or equal than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_more_eq</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a21ba0876b51613717ae31897f182568f</Anchor>
    <Abstract>Greatar or equal than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_contains</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a8e157c1a2fe878bb396c1f31060fa46f</Anchor>
    <Abstract>See if a string contains a value. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_find</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a477140509fd9d05fff6c6dde1e47b67c</Anchor>
    <Abstract>Return the idx of x in str. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_upper</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ae974ce37d8ff02e6365a0693f40d2211</Anchor>
    <Abstract>Conver a string to upper case. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_lower</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a762f15e633aeee7cd254d69b1ea8539d</Anchor>
    <Abstract>Conver a string to lower case. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_sub</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a25c53d60625c55a721f63a819d1544c2</Anchor>
    <Abstract>Get a substring. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_reverse</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aff52c3d475d1684b651e3c5a94516368</Anchor>
    <Abstract>Reverse a string. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_append</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a2b6809008cdd1dd601f5d74f9693e37f</Anchor>
    <Abstract>Append 2 strings. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_isEmpty</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a078294ea31372ab0dbcc2386c3c5cf5f</Anchor>
    <Abstract>See if an array is empty. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_length</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ab4d313f7f69e1a0f25ccc1f70386979d</Anchor>
    <Abstract>Get the length of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_empty</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>acf26b1de8845f072eb27dd89f2f163c2</Anchor>
    <Abstract>Create an empty array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_create</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a222b597973b736d6e3421d68e99db250</Anchor>
    <Abstract>Create an array filled with an element. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_get</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ae6df364d41ad69e2557253b7cc6570ba</Anchor>
    <Abstract>Get an element from the array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ae9f4dbd73cbc45700efc9fceff0c8d15</Anchor>
    <Abstract>Create a new array with a different element at idx. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_insert</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>af1035915155c3d811f71d5b0fe21b92e</Anchor>
    <Abstract>Insert elements into an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_replace</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a44c4b28857e9355a4ede1ec6eea380c4</Anchor>
    <Abstract>Replace elements in an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_catenate</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aabc798c93f8ca42270e94fb7a91c6a1f</Anchor>
    <Abstract>Array concatenation. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_add_front</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aecd072979a8a6929ca0228990e24bfaa</Anchor>
    <Abstract>Add an element to the start of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_add_back</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a1386b2f1dd931140e6e316a8d1cf304f</Anchor>
    <Abstract>Add an element to the back of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_sub</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a220fa9b2fdd9f0c3abe88fbd13cf3c5d</Anchor>
    <Abstract>Get a subset of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_tup_get</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a9c427a29c131341dd518e43090dfea94</Anchor>
    <Abstract>Access an element of a tuple. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operations</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>afec9c8802e439b4aa0e432c18411a5f5</Anchor>
    <Abstract>Contains references to all the operations. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>evalLit</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a08aeed13e7f3aa8263fd491abb48b6be</Anchor>
    <Abstract>Parse a literal string. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a7b8d23d7bcbb7065fdcced37d5c7b461</Anchor>
    <Abstract>Create a sink. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createStop</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a30ddba6e3e6fcb02f5fb4f4bc4840772</Anchor>
    <Abstract>Create a stop instruction. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createStart</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>ab7a5fd94b4a8dbcbff3be11dfd6d13f1</Anchor>
    <Abstract>Create a start instruction. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createContextChange</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a781d4f0b3d1d7c56d5fd02bb3ecb47c3</Anchor>
    <Abstract>Create a context change instruction. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createContextRestore</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a492fa7ea038cfe45fa32a71e85d25c27</Anchor>
    <Abstract>Create a context restore. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createOperation</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a54792d77f1b24a49d36ef7f44721a581</Anchor>
    <Abstract>Create an operation. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseInst</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a4f4c9dc2cb35f7e50c14018124d47ade</Anchor>
    <Abstract>Parse an instruction declaration. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseChunk</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>ad2a6cdad4d073bf680c47ee61c280ba6</Anchor>
    <Abstract>Parse a chunk declaration. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLit</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a5fc0d76c4ec00f5778d0baec95bf9d67</Anchor>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a354881061ece79f80981fa712f5e76ba</Anchor>
    <Abstract>Parse a link statement. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLine</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a3cb761d2bc030e9ef2eb698408863be3</Anchor>
    <Abstract>Parse a single DIS line. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a87ff76bbd5ab3c200bb0532c04afee95</Anchor>
    <Abstract>Parse a dis string. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a1e69d2d56b67ae274d1d7f2f11633359</Anchor>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chunk</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>aa64d6b999bc20e4cd80f35ece2aee2fe</Anchor>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>instructions</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a8fabca7c8ec80f893e52c546adfb7a34</Anchor>
    <Abstract>Defines the operation codes and the functions to create them. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functions</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a08937222a213e2af5ca289687b490b71</Anchor>
    <Abstract>Functions to parse the various statements. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_doc_DIS</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_doc__d_i_s.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md_doc_IF1</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md_doc__i_f1.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Simple</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>_simple.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Call</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>_call.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Select</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>_select.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Sort</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>_sort.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>todo</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>todo.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backEnd</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Abstract>DISc backend Selector. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Anchor>a8fb37509b863bbe85fce88efe04582db</Anchor>
    <Abstract>Select a backend to use. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Anchor>a41d4b4095b3d47b58a718fed9939d0b4</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backend</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end.html</Path>
    <Anchor>a660fca84b9adcb4d5ea328e1de41e36c</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backEnd::DVM</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>backEnd::DVM</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m.html</Path>
    <Abstract>DVM Backend. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backEnd::DVM::dis</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Abstract>dis writer </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createLink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>abd4da19657e02a55927f2479fd1fc4bf</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>a5bd8cc014e09436563319444734d28c4</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>a1bb2a201b018c8c28ffba4256245210a</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createChunk</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>ad5c8bcaf3fcb3dea28cbe8558db89667</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DVM_CHUNKS</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dis</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dis.html</Path>
    <Anchor>a6d420beb3004da764486ac5f6234451b</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backEnd::DVM::dis::DIS</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>backEnd.DVM.dis.DIS</Scope>
    </TokenIdentifier>
    <Path>classback_end_1_1_d_v_m_1_1dis_1_1_d_i_s.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>backEnd.DVM.dis.DIS</Scope>
    </TokenIdentifier>
    <Path>classback_end_1_1_d_v_m_1_1dis_1_1_d_i_s.html</Path>
    <Anchor>a862f60046204a6dc3182efc1bc660285</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addPredefined</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>backEnd.DVM.dis.DIS</Scope>
    </TokenIdentifier>
    <Path>classback_end_1_1_d_v_m_1_1dis_1_1_d_i_s.html</Path>
    <Anchor>a96491fe3e55e7086c30365066487eb92</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>backEnd.DVM.dis.DIS</Scope>
    </TokenIdentifier>
    <Path>classback_end_1_1_d_v_m_1_1dis_1_1_d_i_s.html</Path>
    <Anchor>a3f4a6fc1203b5147632136faa9445715</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__repr__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>backEnd.DVM.dis.DIS</Scope>
    </TokenIdentifier>
    <Path>classback_end_1_1_d_v_m_1_1dis_1_1_d_i_s.html</Path>
    <Anchor>abdcb364c7cca5bce4cf6a217fa6514d2</Anchor>
    <DeclaredIn>dis.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd.DVM.dis.DIS</Scope>
    </TokenIdentifier>
    <Path>classback_end_1_1_d_v_m_1_1dis_1_1_d_i_s.html</Path>
    <Anchor>a5718ecd0dd2ae03bee5e23889512877f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backEnd::DVM::dvm</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Abstract>dvm interface </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>run</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>a4c5f5cb49eb78f3d7590b7d2d07115dd</Anchor>
    <Abstract>Run DVM on a dis string, with inputs, and return the results. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>ad7747e30f6792420939e7cb9f942d0f1</Anchor>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>path</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>a962c0895671f5ed5463d5b0c17d8a471</Anchor>
    <Abstract>Default dvm path. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cores</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>a2f3589e96060b2ba8b7881f6517c28f4</Anchor>
    <Abstract>Default amount of cores to use. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>logLevel</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>backEnd::DVM::dvm</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1dvm.html</Path>
    <Anchor>ae31b46dd72807e5a67434feb14bda152</Anchor>
    <Abstract>Default loglevel to use. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>backEnd::DVM::literals</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Abstract>IGR Literal removal. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a502b93aec6ea128eea879ba1ade42a1a</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a1a3c3c3603f3af45db8b7079b8a74327</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>af3f1c6df1cac8584b86c763d825d8e43</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>transformNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a726f37313ce3b3d4bd2f31fd6c6f5c5b</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deleteNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>aeccc2a181d4ca275701e9ece1fd160e4</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeOperationLiterals</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>backEnd::DVM::literals</Scope>
    </TokenIdentifier>
    <Path>namespaceback_end_1_1_d_v_m_1_1literals.html</Path>
    <Anchor>a12430b741030fa8bd4efb49fa613fe2f</Anchor>
    <DeclaredIn>literals.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Abstract>Dataflow Virtual Machine. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addOperationInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>aa0358e6c4cd7ce27b25dfa19c7d1f97f</Anchor>
    <Abstract>Add an operation instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a0a9167ffe1bc3f7d778cda3c1c77d334</Anchor>
    <Abstract>Add a sink instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addContextChange</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ade0cb4a02aac6b081a9f3c7108e74b14</Anchor>
    <Abstract>Add a context change instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addContextRestore</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ad150c9d50bdacb978da6423a3316abc4</Anchor>
    <Abstract>Add a context restore instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addStopInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a803785af4adb84dbc665cba281df8aab</Anchor>
    <Abstract>Add a stop instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addDestination</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a56fc7e50cda38141e414895f6b118357</Anchor>
    <Abstract>Add a destination to a given instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ad9b2e735c8964c4efc36149e3863f873</Anchor>
    <Abstract>Add a literal to a given instruction. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>ad86476e99dd74e173d5949a6c486a03b</Anchor>
    <Abstract>Start the execution cores. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addData</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a1d75a7ff0a5d7d0ad350455a21bceef2</Anchor>
    <Abstract>Add an external token containing data. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIn</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>aacc1dc1509b580b630738c1c61fa619b</Anchor>
    <Abstract>Return the amount of input the runtime requires. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setIn</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a64a7b5be7fa0e4857117508b808dc889</Anchor>
    <Abstract>Set the amount of inputs that the runtime expects. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPort</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a89956e4c036740132c8cba32795c5d61</Anchor>
    <Abstract>Check the current port of the runtime. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasIn</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core</Scope>
    </TokenIdentifier>
    <Path>namespacecore.html</Path>
    <Anchor>a9e050d23df9ad6e1acb5df7006fa45b3</Anchor>
    <Abstract>See if the runtime expects additional input. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::context</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::context</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1context.html</Path>
    <Abstract>DVM Contexts. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::context::Context</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Abstract>DVM Context. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>aa00755cdcb09fe82178c8fa8ad8ee6e4</Anchor>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>ab787fc52c9b425cbf793763950710689</Anchor>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__eq__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>ae88ac6bb47bad0347c07ba0af1e1cafa</Anchor>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__hash__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>a2302bfe6bd5aa1aa0fa31a88b947403e</Anchor>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hashPair</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>ae51b14b3a342550aca63b51295d0ed41</Anchor>
    <Abstract>Generate a unique, integral identifier for a pair of non-negative integers. </Abstract>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unhashPair</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>a9a244d4869346fc5e178932c5c343901</Anchor>
    <Abstract>Unhashes the hash. </Abstract>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.context.Context</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context.html</Path>
    <Anchor>a397854106f13a8c74cd34b86b67257f7</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::context::ContextCreator</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.context.ContextCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context_creator.html</Path>
    <Abstract>Context creator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.ContextCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context_creator.html</Path>
    <Anchor>acbfd5b6f1c014eeb3688b266f0a4e086</Anchor>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.context.ContextCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context_creator.html</Path>
    <Anchor>aaee11a8561c03ae27303a03886cb2602</Anchor>
    <DeclaredIn>context.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prefix</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.context.ContextCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context_creator.html</Path>
    <Anchor>ae04cb283ad9a8e639f70b06865a9dd83</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>current</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.context.ContextCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_1_1_context_creator.html</Path>
    <Anchor>ab819bd36118d0441374ebdf11b3b228e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::contextMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::contextMatcher</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1context_matcher.html</Path>
    <Abstract>DVM context matcher. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::contextMatcher</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1context_matcher.html</Path>
    <Anchor>a0cd8cef399df55ab3a62938e4b491da1</Anchor>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::contextMatcher::ContextMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Abstract>DVM Context matcher. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>ae86db3f3998e735acbe29cff6f6543bd</Anchor>
    <Abstract>Initialize a context matcher. </Abstract>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>checkKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>a9e6d1dde230adb9e29d0c0fd3d3ad250</Anchor>
    <Abstract>See if a given key is already a part of the tokens we are matching. </Abstract>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>updateKeyArr</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>a040a3c5584f1f369233e330dfbd36937</Anchor>
    <Abstract>Update the token array for a key This method assumes that there is an array for the given key...</Abstract>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isKeyReady</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>aea471414c34c2081f396227dfeebfc8b</Anchor>
    <Abstract>See if all the input tokens are present for a given key. </Abstract>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>executeKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>a06d0216c7e4c4ffc499f394769a67ccb</Anchor>
    <Abstract>Add the tokens for key to the scheduler. </Abstract>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>a898844014caa85d4f0c1ceb99237e80d</Anchor>
    <Abstract>Add a token to the matcher. </Abstract>
    <DeclaredIn>contextMatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tokens</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>a8e5a39e53adfd4c5c0dfd08a42a6ad7b</Anchor>
    <Abstract>Dictionary that contains the tokens for all the keys. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.contextMatcher.ContextMatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1context_matcher_1_1_context_matcher.html</Path>
    <Anchor>a8c187035839a8d512720904c08624566</Anchor>
    <Abstract>Reference to the DVM::Core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::dispatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::dispatcher</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1dispatcher.html</Path>
    <Abstract>DVM token dispatcher. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::dispatcher</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1dispatcher.html</Path>
    <Anchor>ad2e1a103f7b3f1652567c1747b150ddd</Anchor>
    <DeclaredIn>dispatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::dispatcher::TokenDispatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.dispatcher.TokenDispatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1dispatcher_1_1_token_dispatcher.html</Path>
    <Abstract>Token Dispatcher. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.dispatcher.TokenDispatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1dispatcher_1_1_token_dispatcher.html</Path>
    <Anchor>aa30c96ec3aa980af5ff5c42c22ef61d7</Anchor>
    <DeclaredIn>dispatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>processStop</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.dispatcher.TokenDispatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1dispatcher_1_1_token_dispatcher.html</Path>
    <Anchor>a6e46961e9f9745e13947edf1852cf547</Anchor>
    <DeclaredIn>dispatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>processStandard</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.dispatcher.TokenDispatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1dispatcher_1_1_token_dispatcher.html</Path>
    <Anchor>a2f14155d26e17d4ab14dbf1dbf821623</Anchor>
    <DeclaredIn>dispatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.dispatcher.TokenDispatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1dispatcher_1_1_token_dispatcher.html</Path>
    <Anchor>aea9d3ed1662329987b9a886c8e2b5466</Anchor>
    <DeclaredIn>dispatcher.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.dispatcher.TokenDispatcher</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1dispatcher_1_1_token_dispatcher.html</Path>
    <Anchor>ab368168c9cf6744c450129aa3182ded2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::instruction</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1instruction.html</Path>
    <Abstract>DVM instruction definitions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::instruction</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1instruction.html</Path>
    <Anchor>acb7b0d0df307af5dbac16a6358ec591a</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction::AbstractInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Abstract>General DVM instruction. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>aae732b6ec590dac0cddc3426fa96658a</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>ac51b309847a681f30924519582fa29af</Anchor>
    <Abstract>Set the instruction address. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a655687cf84baeae06920ce2646815002</Anchor>
    <Abstract>Return a string representation of this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>execute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a08e8731f144ffaff32ca0cf564356f1e</Anchor>
    <Abstract>Execute an instruction with a given input and a core. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a64e94d241511dc768fac2e70a02e570e</Anchor>
    <Abstract>See if an instruction requires context matching. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>add17318f1f80dc01de0c6d08b3108c8f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction::OperationInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Abstract>An operation instruction defines a single operation on all of it&amp;#39;s inputs. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a59e4eed24a5a5395d64544af975114b1</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>af3c0e2b92be32e49dfbca6307833dfa7</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addDestination</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a27477e05a6e6dbf16939a4532e73b597</Anchor>
    <Abstract>Add a destination to this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendDatum</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a14b34a4fdc90cc814c131496e996621b</Anchor>
    <Abstract>Send a datum to all of the destinations. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>ad3c13340b0993252d64253e3a7d46bb7</Anchor>
    <Abstract>Add a literal to the operation. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createArgLst</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>aa29f0cabaef83cc2e1545fd8f19041e8</Anchor>
    <Abstract>Merge the literals with the arguments. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>execute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a8abe301191403572cbad6ad631081f0a</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>ac51b309847a681f30924519582fa29af</Anchor>
    <Abstract>Set the instruction address. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a655687cf84baeae06920ce2646815002</Anchor>
    <Abstract>Return a string representation of this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destinations</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a0ffa039eaaca02bac84191551983f93d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operation</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a80fc6d22e7a4cca9d863d874cce28379</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a439f00978854df97a819c8d7b19e6138</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>argLst</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a414e1b4d8f01ab96a7313634a487c8bb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>idxLst</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a4b0ec2213005f75886b90c21c00e6d91</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasLit</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.OperationInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_operation_instruction.html</Path>
    <Anchor>a42864c031d933b97c4368c9c73897010</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>add17318f1f80dc01de0c6d08b3108c8f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction::Sink</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.instruction.Sink</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_sink.html</Path>
    <Abstract>Sink instruction. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.Sink</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_sink.html</Path>
    <Anchor>a015f4ff2df95bd364bc31e0358e3dff2</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addDestination</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.Sink</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_sink.html</Path>
    <Anchor>a9545071b3712fea67400ae47e07e2c28</Anchor>
    <Abstract>Add a destination to this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendDatum</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.Sink</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_sink.html</Path>
    <Anchor>aedb57639f9f4a1c3adbea004fbd87958</Anchor>
    <Abstract>Send a datum to any destination of a given output port. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>execute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.Sink</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_sink.html</Path>
    <Anchor>a6f6222f282aecf2ac4f6c56660667d5d</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>ac51b309847a681f30924519582fa29af</Anchor>
    <Abstract>Set the instruction address. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a655687cf84baeae06920ce2646815002</Anchor>
    <Abstract>Return a string representation of this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a64e94d241511dc768fac2e70a02e570e</Anchor>
    <Abstract>See if an instruction requires context matching. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destinations</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.Sink</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_sink.html</Path>
    <Anchor>a02113388d825011118e5981d57bf960e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>add17318f1f80dc01de0c6d08b3108c8f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction::ContextChange</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Abstract>Represents a context change in the program. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a23525affdb05a164623a520998048ab4</Anchor>
    <Abstract>Initialize a context change instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a51e68dd7f4ff44e260ddff4bc7a0252d</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getLiterals</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>af3070a9a3aff15d79e64889185c1462d</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>execute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a5c61748c4ea33e916f5a3c57b0a04ae2</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>ac51b309847a681f30924519582fa29af</Anchor>
    <Abstract>Set the instruction address. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a655687cf84baeae06920ce2646815002</Anchor>
    <Abstract>Return a string representation of this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a64e94d241511dc768fac2e70a02e570e</Anchor>
    <Abstract>See if an instruction requires context matching. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>retnSink</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a6213f85f71514131906b37e1201d1976</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destSink</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a8c3d69bd61884b15c178e10b938d61fb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contexts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a0f3e68192d500a3ed4d8915dafee9adf</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>literals</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.ContextChange</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_change.html</Path>
    <Anchor>a8e806596b699c69c18c61e8397686422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>add17318f1f80dc01de0c6d08b3108c8f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction::ContextRestore</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.instruction.ContextRestore</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_restore.html</Path>
    <Abstract>Represents the restoration of context. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>execute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.ContextRestore</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_context_restore.html</Path>
    <Anchor>a63c4736a4f2760e4d58a7ad6cf0fa9ed</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>ac51b309847a681f30924519582fa29af</Anchor>
    <Abstract>Set the instruction address. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a655687cf84baeae06920ce2646815002</Anchor>
    <Abstract>Return a string representation of this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a64e94d241511dc768fac2e70a02e570e</Anchor>
    <Abstract>See if an instruction requires context matching. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>add17318f1f80dc01de0c6d08b3108c8f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::instruction::StopInstruction</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.instruction.StopInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_stop_instruction.html</Path>
    <Abstract>Represents the end of the program. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>execute</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.StopInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_stop_instruction.html</Path>
    <Anchor>a321e1aca9cfeaacd1fc07d7eac890e83</Anchor>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setKey</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>ac51b309847a681f30924519582fa29af</Anchor>
    <Abstract>Set the instruction address. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a655687cf84baeae06920ce2646815002</Anchor>
    <Abstract>Return a string representation of this instruction. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>a64e94d241511dc768fac2e70a02e570e</Anchor>
    <Abstract>See if an instruction requires context matching. </Abstract>
    <DeclaredIn>instruction.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.instruction.AbstractInstruction</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1instruction_1_1_abstract_instruction.html</Path>
    <Anchor>add17318f1f80dc01de0c6d08b3108c8f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::memory</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Abstract>DVM instruction memory. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a50fc28a667ac098318aea1a1c98b4706</Anchor>
    <Abstract>Get a reference to the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reset</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a1765945bfc16abcf7ecf4b56c4d5d1ee</Anchor>
    <Abstract>Delete all the contents of the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>adcd75eabf1c237556ef1c8fc10702036</Anchor>
    <Abstract>Get an instruction from the main memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsMatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a8b68327efca6249f5bde090d43374d7e</Anchor>
    <Abstract>See if an instruction needs to pass the matcher Instructions that require a context manager are store...</Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>adadafaa74f91e37b9c0d0f7bb51988f2</Anchor>
    <Abstract>Add an instruction to the main memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__MEMORY__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::memory</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1memory.html</Path>
    <Anchor>a5b84f450c78cc01448f3e4ec8747c54f</Anchor>
    <Abstract>Main instance of the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::memory::InstructionMemory</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.memory.InstructionMemory</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1memory_1_1_instruction_memory.html</Path>
    <Abstract>The Instruction memory stores all of the instructions in the program. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.memory.InstructionMemory</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1memory_1_1_instruction_memory.html</Path>
    <Anchor>a8f22fa3395b472a1156813e40234b4a3</Anchor>
    <Abstract>Initialize the memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.memory.InstructionMemory</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1memory_1_1_instruction_memory.html</Path>
    <Anchor>aacf2e2bcf33a79017dbf5ebad1e10d2c</Anchor>
    <Abstract>Print the contents of the instruction memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.memory.InstructionMemory</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1memory_1_1_instruction_memory.html</Path>
    <Anchor>a5b9011b58141e7c5820fbd1626b5cfc6</Anchor>
    <Abstract>Add an instruction to the memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.memory.InstructionMemory</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1memory_1_1_instruction_memory.html</Path>
    <Anchor>a047af687ab2c0eff932921536d372ee5</Anchor>
    <Abstract>Get an instruction from memory. </Abstract>
    <DeclaredIn>memory.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.memory.InstructionMemory</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1memory_1_1_instruction_memory.html</Path>
    <Anchor>acab6a9aa37ed255cb29c3c7a17066f87</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::runtime</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Abstract>DVM runtime core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a7b2f8d99c507dcb53e31bf8296b8bd69</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addData</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a4fe3e65a2c62930486886a5095446389</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>ad0f367bed031f8b4f82413776061fb30</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__cores__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a25b6674940b07aa06df405848dd9df5c</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__port__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>aa752c279cf56ec5a6ea35d0e09a7253a</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__in__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::runtime</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1runtime.html</Path>
    <Anchor>a878cd578c09376445089f77a7de165c2</Anchor>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::runtime::Core</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Abstract>Runtime core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a416d30561a502284b0a28dbfcb4a4783</Anchor>
    <Abstract>Initialize a core. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>ae748c9fd32214e858f8e0b54330c5bac</Anchor>
    <Abstract>String representation of a core. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__eq__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a3f4bf085471d8c1c0ee22fe81641cd08</Anchor>
    <Abstract>See if 2 cores are equal. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>ad51c3e0d80dfb4b84389014432ba8c58</Anchor>
    <Abstract>Add a token to the inbox of a core. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>link</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a63d6568fc4cdb08a8012c15329f05d81</Anchor>
    <Abstract>Add a reference to the message queues of the other cores. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>ad1c6da697790371c9dbd223aab9690bc</Anchor>
    <Abstract>Start the runtime. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stop</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a8fac04766062ea999c54c68f974badfa</Anchor>
    <Abstract>Stop the current core. </Abstract>
    <DeclaredIn>runtime.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a46680112981cfdfabb154f9041e3f0f6</Anchor>
    <Abstract>Instruction memory. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>identifier</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>afa23bc7ed2ad6b4e77b0857ac73d0e91</Anchor>
    <Abstract>Identifier of this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>active</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a4e2ec1436045d4e89011202f44382521</Anchor>
    <Abstract>See if this core is running. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cores</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a90a51e4b4297931c50cfd3c12ba4d517</Anchor>
    <Abstract>Message Queues of the other cores. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inbox</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a0da35aef8039255d37eec8bd2e3ab2dd</Anchor>
    <Abstract>Message Queue of this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contextCreator</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>af063d02573dfb186742531c844fd8f95</Anchor>
    <Abstract>Context creator for this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tokenCreator</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>ae8c7893d3330ff05188d87aa7f792d2b</Anchor>
    <Abstract>Token creator for this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dispatcher</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a068f6f9ef6dd9b1dac8c59dc8c3e9e6f</Anchor>
    <Abstract>Token dispatcher for this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scheduler</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>a7e5b0c28dae815f8a259cb7db70eb6e7</Anchor>
    <Abstract>Scheduler for this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matcher</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.runtime.Core</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1runtime_1_1_core.html</Path>
    <Anchor>af4759bad6aa35362a6efd93487c974d1</Anchor>
    <Abstract>Context matcher for this core. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::scheduler</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::scheduler</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1scheduler.html</Path>
    <Abstract>DVM instruction scheduler. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core::scheduler</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1scheduler.html</Path>
    <Anchor>a5ea400a0ded1ee3859e42a606c92507d</Anchor>
    <DeclaredIn>scheduler.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::scheduler::Scheduler</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.scheduler.Scheduler</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1scheduler_1_1_scheduler.html</Path>
    <Abstract>DVM Scheduler. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.scheduler.Scheduler</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1scheduler_1_1_scheduler.html</Path>
    <Anchor>a5157d9e27a945a7b5036f89e6bc0535b</Anchor>
    <DeclaredIn>scheduler.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>schedule</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.scheduler.Scheduler</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1scheduler_1_1_scheduler.html</Path>
    <Anchor>a87b47093624481748a7d185c9527ae52</Anchor>
    <DeclaredIn>scheduler.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.scheduler.Scheduler</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1scheduler_1_1_scheduler.html</Path>
    <Anchor>a2c366d24dc034bfd15a6ea44af35ce7e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::token</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::token</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1token.html</Path>
    <Abstract>DVM Tagged tokens. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::token::Token</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.token.Token</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_token.html</Path>
    <Abstract>Represents a DVM token. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Token</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_token.html</Path>
    <Anchor>a266d13c3ecfbafc4dde0a46d3a8936e7</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Token</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_token.html</Path>
    <Anchor>a6b079e8a875eab3d8791b81d7b002b74</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>datum</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Token</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_token.html</Path>
    <Anchor>ad7d1d5e1160b13f8c06cf99eb33868ab</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tag</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Token</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_token.html</Path>
    <Anchor>abd4543cdd23c84a91085f7b7927b74e5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::token::AbstractTag</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.token.AbstractTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_abstract_tag.html</Path>
    <Abstract>Represents a tag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isStop</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.AbstractTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_abstract_tag.html</Path>
    <Anchor>a6158f92338a9f11ab436b5ac5dd83778</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::token::Tag</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Abstract>Standard tag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>aa5769c1f47cfc3ae74a3553247ab9d99</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a2218733abfa5d6df7a31de2585f70676</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isStop</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a72379c4ea74fcb10ee88d2e384652e12</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a64b66df1c4d8f4cd44ddc1cf4e72034f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cont</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>aa795f56c33f2d4889874f92895ac5554</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>port</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a2792a4e18abe954a2af3b784ea58f478</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inst</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>ac13dace193894359e5d79420f8685fe8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::token::ExternalTag</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.token.ExternalTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_external_tag.html</Path>
    <Abstract>External Tag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.ExternalTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_external_tag.html</Path>
    <Anchor>aa50ae3a351c92bf42a6951088e0ca5a6</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a2218733abfa5d6df7a31de2585f70676</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isStop</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a72379c4ea74fcb10ee88d2e384652e12</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a64b66df1c4d8f4cd44ddc1cf4e72034f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cont</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>aa795f56c33f2d4889874f92895ac5554</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>port</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>a2792a4e18abe954a2af3b784ea58f478</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inst</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.token.Tag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_tag.html</Path>
    <Anchor>ac13dace193894359e5d79420f8685fe8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::token::StopTag</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.token.StopTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_stop_tag.html</Path>
    <Abstract>Stop Tag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.StopTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_stop_tag.html</Path>
    <Anchor>a3b0fc00ec9b2831e855d9eb3aa5b5aa3</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isStop</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.token.StopTag</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_1_1_stop_tag.html</Path>
    <Anchor>af761160324be7c1aa7a605dc18efb301</Anchor>
    <DeclaredIn>token.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::tokenCreator</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>core::tokenCreator</Scope>
    </TokenIdentifier>
    <Path>namespacecore_1_1token_creator.html</Path>
    <Abstract>DVM token creator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core::tokenCreator::TokenCreator</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Abstract>DVM Token creator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>abf795842433cb150ff2cd58f42d019ad</Anchor>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simpleToken</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>a17cafd58974a9fdd79834817a012c602</Anchor>
    <Abstract>Create a simple token, with a known destination. </Abstract>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createNewContext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>a1f735ff6e672f56b5481f5ff9a35a4c1</Anchor>
    <Abstract>Create a new context for a token. </Abstract>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendToOldContext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>a6bc2d079feb518a714d05942fab09eb4</Anchor>
    <Abstract>Change the context of a token. </Abstract>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>changeContext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>ac53d82a6f9d74687751b24c733000ca4</Anchor>
    <Abstract>Change the context of a token. </Abstract>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>restoreContext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>ae9ee1f333586314900f7c802ca984cf6</Anchor>
    <Abstract>Restore the old context of a token. </Abstract>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopToken</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>a7ddc78b04b447b0102525e13786c2d70</Anchor>
    <Abstract>Create a stop token. </Abstract>
    <DeclaredIn>tokenCreator.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>core</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>a62a05bacf3c7343a4dfdde2b1db95a57</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contextMap</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>aedeba572df87c091e34f2e8234d03d16</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>restoreMap</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>core.tokenCreator.TokenCreator</Scope>
    </TokenIdentifier>
    <Path>classcore_1_1token_creator_1_1_token_creator.html</Path>
    <Anchor>abd6fde0a66238ec75a2c929acd2eee66</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disc</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>disc</Scope>
    </TokenIdentifier>
    <Path>namespacedisc.html</Path>
    <Abstract>DISc Main file. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loc</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>disc</Scope>
    </TokenIdentifier>
    <Path>namespacedisc.html</Path>
    <Anchor>a514324055e0953215c42fb956b979201</Anchor>
    <DeclaredIn>disc.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Abstract>DVM Main file. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>handle_exit</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>a2e32617d77431cc90e14996cd05d3bcd</Anchor>
    <Abstract>Handle an exit signal. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>argParser</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>aa067e7021475dc71ccd9019423b3a7c5</Anchor>
    <Abstract>Bind handle_exit to sigint. </Abstract>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>args</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>a0df66969824d161dbff839bc07aa2d19</Anchor>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>dvm</Scope>
    </TokenIdentifier>
    <Path>namespacedvm.html</Path>
    <Anchor>ab12ff8b46e7c77add9ddc198e2a6fbb5</Anchor>
    <DeclaredIn>dvm.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Abstract>DISc Frontend Selector. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a9c7248fd78783fd6023b426b0df7f2cd</Anchor>
    <Abstract>Select a frontend to use. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a20e80333b9398751e22cc4ca4187a56f</Anchor>
    <Abstract>Convert the given string to IGR. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromFile</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>ab7d150fb7e8fbe8c5916d6e0e0567737</Anchor>
    <Abstract>Convert the contents of a file to IGR. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a61576283eccc9538a7323ca0324e1b89</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end.html</Path>
    <Anchor>a22bc3d2d929d9c4953bcb0d40677cd59</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Abstract>DISc IF1 Parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>skipLine</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>a6298bf62d1e5ea5855c45dda1c48b3c2</Anchor>
    <Abstract>Skip a line #. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLine</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>a182e348455d64f0dc8f81d88de836811</Anchor>
    <Abstract>Parse a single if1 line. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>adee397a4b0536592fdedbf6fb8eb08b6</Anchor>
    <Abstract>Parse a complete IF1 string. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>abedb1f2799547653a5a1ad2cec9c654a</Anchor>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__FUNCTIONS__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1.html</Path>
    <Anchor>a99978b96e45262d698771df96c3ec437</Anchor>
    <Abstract>Parser values and the function to call when they are encountered. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::compound</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Abstract>Compound node reference. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Anchor>aa3f94e445b385305aec08fcdb27d4838</Anchor>
    <DeclaredIn>compound.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Anchor>abaa9da02d033230b48a6264a16136aa4</Anchor>
    <DeclaredIn>compound.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__COMPOUNDS__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::compound</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1compound.html</Path>
    <Anchor>af28ac736ed87c38a133b39ea02e6a84c</Anchor>
    <Abstract>Various IGR compound nodes. </Abstract>
    <DeclaredIn>compound.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::edge</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Abstract>Parse edges and literalss. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseEdge</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>aa597fb2db81faf8c1e12026d7e20518f</Anchor>
    <Abstract>Parse an IF1 edge. </Abstract>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>aaf9a955972731c081fc17c330a920f1d</Anchor>
    <Abstract>Parse an IF1 literal. </Abstract>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a051311fc8c586b6cad1793ada5a5b2af</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_src_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a066b507406458804bc4806b95ebaf586</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_srcp_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>ac4ceb75e08df06a6dadeab8a8340946a</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_dst_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a15516e59d14ffd0247e8fa62886020b1</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_dstp_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a89c095f7b55258db64c8df4813ddd38e</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_e_type_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a7640a51a6213faa18f106a99fa97a4b1</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_dst_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a3202a440e26f85fe996067b0f2ca585a</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_dstp_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a3ce1f894ea62d6564a4479c5a224d60b</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_type_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>ae634a404b821fa406239b477f9a4e26e</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_l_str_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::edge</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1edge.html</Path>
    <Anchor>a86af0a51e11652cb13c20390585ae4cb</Anchor>
    <DeclaredIn>edge.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::environment</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Abstract>Node lookup and scoping rules. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scope</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>aecee912bdfd884cb614c447fe9de0396</Anchor>
    <Abstract>Create a new scope and push it on top of the stack. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>scopeCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>abd1a1fc8e610e02b56f4d790233ea5d1</Anchor>
    <Abstract>Create a new compound scope and push it on top of the stack. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>popScope</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>aac5a1b7869d743eb4847013b4c69ec4d</Anchor>
    <Abstract>Remove the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a5e36484cf61edf1ba6dfbafee003449a</Anchor>
    <Abstract>Get the node with label in the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a9cccdfd72ef6b4b8fa3660ed7978a190</Anchor>
    <Abstract>Add node with label to the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a55b1a40c6e420b6d79bde3e6822a42de</Anchor>
    <Abstract>Get the subgraph of the current scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>ad5fec7a4a795cd16a10ddb7449ad5bf2</Anchor>
    <Abstract>Add a subgraph to the compound scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>adcd9de5718e86ff09b91c19fd6ed8826</Anchor>
    <Abstract>Get the subgraphs. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a8feeb741c1940dce1db9b79f565dc69b</Anchor>
    <Abstract>Are we currently in a compound node? </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>enterComp</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>af8712477c7e3bf73ada87147dd014513</Anchor>
    <Abstract>Enter a compound node. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exitComp</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>ae2e7f9e7868d0f79239cbf22ff2fe837</Anchor>
    <Abstract>Exit a compound node. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>aba754eedd62e71b9a7fab064b9b5bd25</Anchor>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__STACK__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a2ad3e8faf02f03227e8def45f3bdc58e</Anchor>
    <Abstract>A stack with the global scope at the bottom, and the current scope at the top. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__COMP_LEVEL__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::environment</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1environment.html</Path>
    <Anchor>a9f1b997df734fc12ee3b1baa21070513</Anchor>
    <Abstract>Keeps track of the level of depth w.r.t. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::environment::Scope</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.environment.Scope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_scope.html</Path>
    <Abstract>Single part of the scope stack. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.environment.Scope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_scope.html</Path>
    <Anchor>aed1915e68615cf96e1418db9ba78b15f</Anchor>
    <Abstract>Create a scope belonging to a subgraph.s By convention, the subgraph can always be found at label 0...</Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addNode</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.environment.Scope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_scope.html</Path>
    <Anchor>ae9743337d4c4a8ed1bdf66b8e29ecd33</Anchor>
    <Abstract>Add a node to the scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNode</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.environment.Scope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_scope.html</Path>
    <Anchor>a1b440cfb3430e121e4403299deeb1fec</Anchor>
    <Abstract>Get a node from the scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.environment.Scope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_scope.html</Path>
    <Anchor>a697237d6be74d61747f991f134afd7f1</Anchor>
    <Abstract>Get the subgraph of the scope. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodes</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.environment.Scope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_scope.html</Path>
    <Anchor>ae0bd6036c59f7490f37670773a922dc4</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::environment::CompoundScope</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.environment.CompoundScope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_compound_scope.html</Path>
    <Abstract>Single part of the scope stack. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.environment.CompoundScope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_compound_scope.html</Path>
    <Anchor>a6e2b86123ff42d3521dcca1261f5fda8</Anchor>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.environment.CompoundScope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_compound_scope.html</Path>
    <Anchor>a672b2cc6a42b43576a80afa5b59d2f57</Anchor>
    <Abstract>Add a graph to the list of subgraphs. </Abstract>
    <DeclaredIn>environment.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>graphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.environment.CompoundScope</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1environment_1_1_compound_scope.html</Path>
    <Anchor>ab56aa57129baeec2f138e50d153b1feb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::graph</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Abstract>Node parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a507960bf11a92961a199bc75f8526a34</Anchor>
    <Abstract>Parse a standard subgraph. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCompoundSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a974ac871e1fc3b2c8967b6c3e7cdf082</Anchor>
    <Abstract>Parse a subgraph of a compound node. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a3911c6e633459eb847115cc2c64a736d</Anchor>
    <Abstract>Determine which kind of subgraph we are dealing with. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseStandardNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a6c564c1107c93f9e290dfad09c497b2b</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCallNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>ad1b6f67cdde9dc5915aba037a0abef8d</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a3b96a38fd829649d932ae5ec079bd560</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCompoundStart</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a0c84597ede466784e96743d0121eeb15</Anchor>
    <Abstract>Parse the start of a compound node. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseCompoundEnd</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>aea7ab4376085489279fbc96c2a487577</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_n_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a5ce12b365485c3e00d367b0bddd0936f</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_n_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a73decdccf71bdf0c1839bd058e4b0498</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_g_type_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a365d1a4f550b72a9b113754235334a28</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_g_name_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a800ddf7df1b2825dff60465490e97fe3</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_cs_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>af90ad934ab28b3b6b72cfee02fb09a3c</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_cs_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a7fed8275b44e110c076c2051f1b7444f</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>ae4d70b66132ee2a0d68ab355faf8f63c</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>adefc35448bb1a14a4e45c33b2a531004</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_len_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>ac4066729f7029261a05f3b1322f4d7b3</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_ce_lis_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::graph</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1graph.html</Path>
    <Anchor>a1ff97c082309cfdf10b7536275e80a39</Anchor>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::operations</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Abstract>IF1 operations. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFunction</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Anchor>a7adddda9015af7031ebfa41eb0b04af5</Anchor>
    <DeclaredIn>operations.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Anchor>aa87acac587b0fda80a1f2fba3d7574f4</Anchor>
    <DeclaredIn>operations.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_functions</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::operations</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1operations.html</Path>
    <Anchor>af7fb1f27652afbcfca3791bf35f96fc5</Anchor>
    <DeclaredIn>operations.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Abstract>Type parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ade899f38299109be3e95942f608a0268</Anchor>
    <Abstract>Get a type from the pool. </Abstract>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseType</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ab32c81047066ac3fb6322eb1615a470f</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ad990b1aa923f14f032d458d86ab73928</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_label_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a821443db1ae98ccdf9c1f4abd70848a9</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_code_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a9f1dde8c89f6ab43798d896bd2a6079f</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_arg_1_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a6597008016eb3161a2886f6d049d409d</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_arg_2_idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ac631114265ac5777d595dbd156529121</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_type_codes</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>aad7a624a22149e348c59daaf5cc63857</Anchor>
    <Abstract>The function that is needed to parse a given idx. </Abstract>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_basic_types</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>a431d68841a0c6d230973ea8612860003</Anchor>
    <Abstract>Basic type codes and the python types to match them. </Abstract>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>_pool</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd::IF1::type</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_i_f1_1_1type.html</Path>
    <Anchor>ab4efb09663f0b4c2caf57fb4c0469a2d</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_Type</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._Type</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___type.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_UnknownType</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._UnknownType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___unknown_type.html</Path>
    <Abstract>Represents any possible type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._UnknownType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___unknown_type.html</Path>
    <Anchor>a10ec06e80eceeb810c15f54414bdde75</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._UnknownType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___unknown_type.html</Path>
    <Anchor>afcae37740720cc2bb10e864f2c9c7c2c</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._UnknownType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___unknown_type.html</Path>
    <Anchor>ae46897e4c4298649373f4fb8ac3e7850</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._UnknownType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___unknown_type.html</Path>
    <Anchor>a0397fc2c8b7ec28da6e830b54e14e7fc</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_BasicType</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._BasicType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___basic_type.html</Path>
    <Abstract>Represents one of the basic IF1 types. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._BasicType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___basic_type.html</Path>
    <Anchor>a0b6a4223cd0bdcfdad81c2dac3963534</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._BasicType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___basic_type.html</Path>
    <Anchor>aae522f4dd82a727f50d84cc413051664</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._BasicType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___basic_type.html</Path>
    <Anchor>abc1505bb9ab6c8b92831f0b2e1fb9d61</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_ContainerType</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._ContainerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___container_type.html</Path>
    <Abstract>Wrapper around a container that contains a single base type (such as an array) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._ContainerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___container_type.html</Path>
    <Anchor>a8276f1f3aa899984bb622398c6f1d92d</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._ContainerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___container_type.html</Path>
    <Anchor>a1d956db2889fcb46eb159cc4facd42e2</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>base</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._ContainerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___container_type.html</Path>
    <Anchor>a3f3d0a37835bcb735f3cd6577ccfecaa</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>container</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._ContainerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___container_type.html</Path>
    <Anchor>a482a26cba5ed867352f60f6ee8f0f447</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_CombinedType</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._CombinedType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___combined_type.html</Path>
    <Abstract>Wrapper around a combined type that contains multiple base types. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._CombinedType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___combined_type.html</Path>
    <Anchor>a349707145ba0e1eff44d523bfae35b15</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._CombinedType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___combined_type.html</Path>
    <Anchor>a0593be5d7a9a05bff7cf8c7b132be59e</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._CombinedType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___combined_type.html</Path>
    <Anchor>a5a64c301d7623d1bd244dc2dda4af207</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>list</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._CombinedType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___combined_type.html</Path>
    <Anchor>afde8b10eca648cdede714b74b4da12fe</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_PointerType</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._PointerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___pointer_type.html</Path>
    <Abstract>Wrapper around a pointer to the first element of a combined type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._PointerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___pointer_type.html</Path>
    <Anchor>a75a34278ce7172a33bb5b1455e9dd9cc</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._PointerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___pointer_type.html</Path>
    <Anchor>aac7c1e39b0ac2ccf191c1aebf8e7df0e</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>follow</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._PointerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___pointer_type.html</Path>
    <Anchor>ac19dfaa75eb1bfd155f7a4f96710758b</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._PointerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___pointer_type.html</Path>
    <Anchor>a3ba5891361b36e14bc6acdf9785cea72</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dest</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._PointerType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___pointer_type.html</Path>
    <Anchor>ad7faf6abfd8f9e2fd8f6e381c9c74d70</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_FunctionType</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___function_type.html</Path>
    <Abstract>Wrapper around a function type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___function_type.html</Path>
    <Anchor>ad9099f342ec9774b23aa807b30e612f0</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___function_type.html</Path>
    <Anchor>a8f5a61d320ae2ba42fa039fd5c6fd7fd</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>args</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___function_type.html</Path>
    <Anchor>a80968bdb2e7edda430827cdcf4f2a6e5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>res</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>frontEnd.IF1.type._FunctionType</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___function_type.html</Path>
    <Anchor>a6ce99995629f7748b7bd9c3e92e09947</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::IF1::type::_TypePool</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>frontEnd.IF1.type._TypePool</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___type_pool.html</Path>
    <Abstract>Store all the encountered types. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._TypePool</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___type_pool.html</Path>
    <Anchor>a4e78f9a9e0b45181636c89aeeb158bbc</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._TypePool</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___type_pool.html</Path>
    <Anchor>ac40f7f2692f68c506654341b96472af9</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addType</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._TypePool</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___type_pool.html</Path>
    <Anchor>a17ed047ea2dc3407d7f6d9e5fb33fa1e</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>frontEnd.IF1.type._TypePool</Scope>
    </TokenIdentifier>
    <Path>classfront_end_1_1_i_f1_1_1type_1_1___type_pool.html</Path>
    <Anchor>a4d5a0129db96272a7f275276bcacf887</Anchor>
    <DeclaredIn>type.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frontEnd::Sisal</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>frontEnd::Sisal</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_sisal.html</Path>
    <Abstract>DISc Sisal FrontEnd. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>frontEnd::Sisal</Scope>
    </TokenIdentifier>
    <Path>namespacefront_end_1_1_sisal.html</Path>
    <Anchor>a07d185fe199f22e2471104b3d2c81189</Anchor>
    <DeclaredIn>Sisal.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Abstract>DVM Intermediate Graph Representation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a97236270f5dbabe7399b907178a00d28</Anchor>
    <Abstract>Get a list of all the non-compound subgraphs in the program. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a95a9c96f7f63e643560fae0437e73417</Anchor>
    <Abstract>Get a subgraph by name. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createGeneralSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>aa5e01d9c08014a16c7515ccda09fce12</Anchor>
    <Abstract>Create a new subgraph. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a8d809c5810700d1e88c378e40b949784</Anchor>
    <Abstract>Create a subgraph and add it to the program graph. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createCompoundSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a4f10b5e5d7d19146b2afb083a7248662</Anchor>
    <Abstract>Create a subgraph for a compound node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a27668aa4e23763aa37d853a2e13b4279</Anchor>
    <Abstract>Create a node, add it to it&amp;#39;s subgraph and return it. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createOperationNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>aa19a1174fd67a1b35805b32137b3d8be</Anchor>
    <Abstract>Create an operation node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createCompoundNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>adb4e4303c598be7439365c74b9c3e052</Anchor>
    <Abstract>Create a Compound node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createCallNode</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>ac8c72c16f2bdae91e9604815dfe7d648</Anchor>
    <Abstract>Create a call node. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a7d8963d3f7d865bd914daf40e70e4f6b</Anchor>
    <Abstract>Add a literal to a port. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connect</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r.html</Path>
    <Anchor>a8d4b1dd299b3c727df94aef20c4c31a4</Anchor>
    <Abstract>Connect 2 ports with an implicit edge. </Abstract>
    <DeclaredIn>__init__.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::dot</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Abstract>IGR dot parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphHeader</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a4bd3bade93d0c9cc2639909fcd69df67</Anchor>
    <Abstract>Add the attributes of the subgraph. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphFooter</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a5baab6aaadcf5140cfbb898db02b05b8</Anchor>
    <Abstract>&amp;quot;close&amp;quot; the subgraph. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>compoundHeader</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ae5e8d3e2913028ae98733ddcf020e92e</Anchor>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>compoundFooter</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ac646de3e1d3a4805bbfd4e57a4c2e1cb</Anchor>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>portString</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a5a22fe85fa8282dad19c1b89d9321197</Anchor>
    <Abstract>Get a representation for a port. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ports</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ab79b8194b24dd32372e38dc81ba38699</Anchor>
    <Abstract>String representation of a port list. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputList</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a48a74ea4c04164cae3ea5629cfc36f17</Anchor>
    <Abstract>Get the portlist for the inputs of a node. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputList</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a5a68597ca34591a3d97d7282bfe67872</Anchor>
    <Abstract>Get the portlist for the outputs of a node. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeIdentifier</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a852920d8b1f41945a0507ac7e54e9ab4</Anchor>
    <Abstract>Identifier of the node. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>edgeStr</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a2f144e23d21de41e8dd391dfc6aac7b5</Anchor>
    <Abstract>Convert a connection to a string. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeLabel</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a0ed7e0a8b80f6b70852adf99cd161b0e</Anchor>
    <Abstract>Add the label of the node to the buffer. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeLinks</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a4bf8bc67240f948ad26dc3ccff87cafc</Anchor>
    <Abstract>Add all the outgoing edges of a node to the buffer. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>node</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a2fa4fdf242aff219099986af386e1751</Anchor>
    <Abstract>Write the information of a node to the buffer. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dotHeader</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a7ce9fa8e72127cc7889c1a94afff20fa</Anchor>
    <Abstract>Write general dot information. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dotFooter</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>aaa36857df44a7aaf9eeb95b5966c40a0</Anchor>
    <Abstract>Close the dot graph. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDot</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ad2dcf03200a33c5368bc5ac31bf518e5</Anchor>
    <Abstract>Create the dot string. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dotToFile</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>aa15087bf161d5c705a29e7ab84d9fdf9</Anchor>
    <Abstract>Get the dot representation and write it to a file. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dot</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>a849825adcd89144f89c2e7fa6a826052</Anchor>
    <Abstract>Convert the IGR graph to dot, save it, and run dot on this file. </Abstract>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::dot</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1dot.html</Path>
    <Anchor>ab3de22a8cb6b97c5257cb23f3078fd74</Anchor>
    <DeclaredIn>dot.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::graph</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Abstract>Complete program. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a713a1927c51880060d46b2110891a75f</Anchor>
    <Abstract>Add a subgraph to the program. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bindName</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a7daf14d676e6a93810df093fd0d5b48f</Anchor>
    <Abstract>Add a subgraph to a given name. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>aa4418c1b490408678b76c17154170b86</Anchor>
    <Abstract>Get a list of all the non-compound subgraphs in the program. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a8bfa02a943148ecfacbcd0afedca711a</Anchor>
    <Abstract>Get a subgraph by name. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__SUBGRAPHS__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>afe7eab2a94fd262b1bb8810624eb3c1e</Anchor>
    <Abstract>All of the functions in the program. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__FUNCTION_NAMES__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::graph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1graph.html</Path>
    <Anchor>a4102493c000554f42f6cf848de690e03</Anchor>
    <Abstract>The function names, combined with the subgraph they map to. </Abstract>
    <DeclaredIn>graph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::literal</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::literal</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1literal.html</Path>
    <Abstract>Literal definitions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::literal::Literal</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.literal.Literal</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1literal_1_1_literal.html</Path>
    <Abstract>Literal. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.literal.Literal</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1literal_1_1_literal.html</Path>
    <Anchor>ad6530f602bb4916644022e9c924328da</Anchor>
    <Abstract>Create a new literal. </Abstract>
    <DeclaredIn>literal.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.literal.Literal</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1literal_1_1_literal.html</Path>
    <Anchor>a29945805d73c7af118c9461662273ac4</Anchor>
    <Abstract>See if this is a port (mainly for traversal) </Abstract>
    <DeclaredIn>literal.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.literal.Literal</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1literal_1_1_literal.html</Path>
    <Anchor>a0f13eef9b1fb911a18f4c7aa4b5eaead</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>destination</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.literal.Literal</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1literal_1_1_literal.html</Path>
    <Anchor>a841f4181b6843835f46f0073003bd878</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::node</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1node.html</Path>
    <Abstract>Node definitions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getKey</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::node</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1node.html</Path>
    <Anchor>a1b8f36b680be632f7fc70930d43afd67</Anchor>
    <Abstract>Generate unique id. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__KEY__</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR::node</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1node.html</Path>
    <Anchor>abcfb5be08585b7403aaeab935b645d44</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::Node</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Abstract>Standard node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7ddacf2fada1a6819aef29b504042744</Anchor>
    <Abstract>Create a new node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af913a53265d9ab50f3d5b117d2220dc1</Anchor>
    <Abstract>Check if this node is a compound node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::SubGraphEntryNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.SubGraphEntryNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_entry_node.html</Path>
    <Abstract>Entry point of a subgraph. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.SubGraphEntryNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_entry_node.html</Path>
    <Anchor>a7dc47966085e403e5a3199122567eac8</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.SubGraphEntryNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_entry_node.html</Path>
    <Anchor>abdd19659f5434a7dcb5912bfb657f00b</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.SubGraphEntryNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_entry_node.html</Path>
    <Anchor>a8ab74d2b56c312401337ae62d847e598</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af913a53265d9ab50f3d5b117d2220dc1</Anchor>
    <Abstract>Check if this node is a compound node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.SubGraphEntryNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_entry_node.html</Path>
    <Anchor>a9428f4be6c8b8ba5ec3fcf6409509239</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::SubGraphExitNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.SubGraphExitNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_exit_node.html</Path>
    <Abstract>Exit point of a subgraph. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.SubGraphExitNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_exit_node.html</Path>
    <Anchor>ad50d3b455a0aaa440dec7ba801279f49</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.SubGraphExitNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_exit_node.html</Path>
    <Anchor>aebf15f476cb6b5134141e7b2f04cd8e8</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.SubGraphExitNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_exit_node.html</Path>
    <Anchor>aca620c5d04bd61225a91c8edf6e92fdd</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af913a53265d9ab50f3d5b117d2220dc1</Anchor>
    <Abstract>Check if this node is a compound node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OutputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.SubGraphExitNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_sub_graph_exit_node.html</Path>
    <Anchor>a7320eddc88279af2dc0d10a2dc4eb9ac</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::OperationNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.OperationNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_operation_node.html</Path>
    <Abstract>Operation node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.OperationNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_operation_node.html</Path>
    <Anchor>a4a1bdde4111c527d32f9d951fd21f8cc</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.OperationNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_operation_node.html</Path>
    <Anchor>afcaadd7dafc19178b81fb46e019f7403</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af913a53265d9ab50f3d5b117d2220dc1</Anchor>
    <Abstract>Check if this node is a compound node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operation</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.OperationNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_operation_node.html</Path>
    <Anchor>ad088cba4697b93191c42436fb035f573</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::CallNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.CallNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_call_node.html</Path>
    <Abstract>Call node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CallNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_call_node.html</Path>
    <Anchor>ac02cc243e62f3f72f7bfa4c433a6f68b</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bindFunction</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CallNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_call_node.html</Path>
    <Anchor>a28f9abce157e5b85d6df1d33cadb7b8f</Anchor>
    <Abstract>Binds the call node to a certain value. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CallNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_call_node.html</Path>
    <Anchor>a7cb449ad9469a45007c9a3806c7d1575</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af913a53265d9ab50f3d5b117d2220dc1</Anchor>
    <Abstract>Check if this node is a compound node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>function</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CallNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_call_node.html</Path>
    <Anchor>ab593140999625b13121700d459aaf89b</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::CompoundNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Abstract>Compound node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a157a70b973681be4340d8958ca556ffb</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::ForallCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.ForallCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_forall_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::SelectCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.SelectCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_select_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::TagCaseCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.TagCaseCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_tag_case_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::LoopACNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.LoopACNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_loop_a_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::LoopBCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.LoopBCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_loop_b_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::IfThenElseCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.IfThenElseCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_if_then_else_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::IterateCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.IterateCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_iterate_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::WhileLoopCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.WhileLoopCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_while_loop_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::RepeatLoopCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.RepeatLoopCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_repeat_loop_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::SeqForallCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.SeqForallCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_seq_forall_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::node::UReduceCNode</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.node.UReduceCNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_u_reduce_c_node.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCompound</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>ac51d30e4ab6aa3e2a66ad973a053db3f</Anchor>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac12f27ab33e889932546764ce499d460</Anchor>
    <Abstract>Create a printable version of the node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ac027c6e51dd93ee101de90af78e15010</Anchor>
    <Abstract>Gets an input port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a388eaacd1a1b23b7acdb5374a82eb877</Anchor>
    <Abstract>Gets an output port. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasNext</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>af27bf3cc1de20e545816b55c865a3445</Anchor>
    <Abstract>See if this node can be followed to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasPrevious</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a0a8c1bd9f1287f13742853107e17c39a</Anchor>
    <Abstract>See if this node can be follow to other nodes. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCall</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>afc491e4689de870cd1df991e3e2f9bad</Anchor>
    <Abstract>Check if this node is a call node. </Abstract>
    <DeclaredIn>node.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraphs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.CompoundNode</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_compound_node.html</Path>
    <Anchor>a5fef521bff3ecc08c64ece721bd9a422</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a9c3a203ce578faac93a1523f98d42d8a</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a59498dccde8b7d6f3cac8fb664304993</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a1f4b9e1d55deec35dc1c9a2af5221275</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputs</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>a7443d56423d81f6a56885efd59cfc2be</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ad43e8fb88ce8b2bad8655f1d2e263553</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputPorts</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.node.Node</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1node_1_1_node.html</Path>
    <Anchor>ab54e1c3fd0dd9b6009dd0ae2f01e17a2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::port</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::port</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1port.html</Path>
    <Abstract>Port definitions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::port::Port</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Abstract>Abstract Port. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>a34b2dc091e146ae93c6cbc648178e713</Anchor>
    <Abstract>Creates a new port for a node and an index. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>a018583e2b8e88d1b723b2efeac0edf65</Anchor>
    <Abstract>Create a string version of the port. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConnected</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>aa79c2af8af3a093a15975c37e39d323f</Anchor>
    <Abstract>See if the port is connected to something. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acceptsLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>a212b989b71cc4360fb6c47aee8f49bbc</Anchor>
    <Abstract>Returns true if this port accepts a literal. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>af7484d14fd283a25a0b44ff4b107592b</Anchor>
    <Abstract>See if this is a port (mainly for traversal) </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>node</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>ab0502321027e62722c2b67b225d60ca7</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>ad2b9adc5de31d770d7692d5e8897eaa1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::port::InputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.port.InputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_input_port.html</Path>
    <Abstract>Port that accepts input for a node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.InputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_input_port.html</Path>
    <Anchor>af72935e85edcfaef3aa17f792dc52f5e</Anchor>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>attach</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.InputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_input_port.html</Path>
    <Anchor>a369193b3dcb94bbe685c5944737626cf</Anchor>
    <Abstract>Attach this port to another port or literal This is an implicit edge representation. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConnected</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.InputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_input_port.html</Path>
    <Anchor>a5464072be8684781d30c3ea9a742d19f</Anchor>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acceptsLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.InputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_input_port.html</Path>
    <Anchor>a117a6748378122085772708446f82e26</Anchor>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>a018583e2b8e88d1b723b2efeac0edf65</Anchor>
    <Abstract>Create a string version of the port. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>af7484d14fd283a25a0b44ff4b107592b</Anchor>
    <Abstract>See if this is a port (mainly for traversal) </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>source</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.InputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_input_port.html</Path>
    <Anchor>a32060995859836d7c1575aa65c280ad6</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>node</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>ab0502321027e62722c2b67b225d60ca7</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>ad2b9adc5de31d770d7692d5e8897eaa1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::port::OutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.port.OutputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_output_port.html</Path>
    <Abstract>Exit point of a node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.OutputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_output_port.html</Path>
    <Anchor>a36f706612a16f09c7be8d8b83c4d3c79</Anchor>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addTarget</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.OutputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_output_port.html</Path>
    <Anchor>a6099aad27956c8063541e9a44ac6dd61</Anchor>
    <Abstract>Add a target to this output port, has to be an input port. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConnected</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.OutputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_output_port.html</Path>
    <Anchor>ad26b4fc3bfd9d1578543b8d18caea076</Anchor>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>a018583e2b8e88d1b723b2efeac0edf65</Anchor>
    <Abstract>Create a string version of the port. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acceptsLiteral</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>a212b989b71cc4360fb6c47aee8f49bbc</Anchor>
    <Abstract>Returns true if this port accepts a literal. </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>af7484d14fd283a25a0b44ff4b107592b</Anchor>
    <Abstract>See if this is a port (mainly for traversal) </Abstract>
    <DeclaredIn>port.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>targets</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.OutputPort</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_output_port.html</Path>
    <Anchor>a49e5fcfbb13d93fb28a8f1e53f95ec5f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>node</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>ab0502321027e62722c2b67b225d60ca7</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>idx</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.port.Port</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1port_1_1_port.html</Path>
    <Anchor>ad2b9adc5de31d770d7692d5e8897eaa1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::subgraph</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::subgraph</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1subgraph.html</Path>
    <Abstract>SubGraph definitions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::subgraph::SubGraph</Name>
      <APILanguage>python</APILanguage>
      <Type>cl</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Abstract>SubGraph. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__init__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>a8494157c59b04064b5bbb926c9fbeaba</Anchor>
    <DeclaredIn>subgraph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>__str__</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>ac8624dfc1382a73fdec413f1ec79b4a1</Anchor>
    <Abstract>Printable subgraph. </Abstract>
    <DeclaredIn>subgraph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>a37d513f191b30020bd7efc54996cee5f</Anchor>
    <Abstract>Get an output port of the subgraph. </Abstract>
    <DeclaredIn>subgraph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputPort</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>a170892e23acc2d46aaeea576d6fb73e7</Anchor>
    <Abstract>Gets an input port of the subgraph. </Abstract>
    <DeclaredIn>subgraph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addNode</Name>
      <APILanguage>python</APILanguage>
      <Type>instm</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>a7b7dc2bc9f285fc6cd293ceeccd32a70</Anchor>
    <Abstract>Add a node to the node list of the subgraph. </Abstract>
    <DeclaredIn>subgraph.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>name</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>ab5ef8bcabe26041a28f3b36ca03a9f3b</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>entry</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>a6cd3a7a8983e07fa6c05b3332608703b</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exit</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>a41d47337d37d6469a1b2a11ee9595913</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodes</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>IGR.subgraph.SubGraph</Scope>
    </TokenIdentifier>
    <Path>class_i_g_r_1_1subgraph_1_1_sub_graph.html</Path>
    <Anchor>ac6d42bcb907b0fb90df72e9839d26874</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IGR::traverse</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>IGR::traverse</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1traverse.html</Path>
    <Abstract>IGR Traversals. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>traverse</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>IGR::traverse</Scope>
    </TokenIdentifier>
    <Path>namespace_i_g_r_1_1traverse.html</Path>
    <Anchor>adc3bc5eee2649d3470326bb52ab80759</Anchor>
    <Abstract>Traverse all the nodes in the program. </Abstract>
    <DeclaredIn>traverse.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>log</Scope>
    </TokenIdentifier>
    <Path>namespacelog.html</Path>
    <Abstract>DVM Logging Setup. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setup</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>log</Scope>
    </TokenIdentifier>
    <Path>namespacelog.html</Path>
    <Anchor>a52a782581d935521b9f10662c0b08eb1</Anchor>
    <Abstract>Set up the root logger. </Abstract>
    <DeclaredIn>log.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FORMAT_STR</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>log</Scope>
    </TokenIdentifier>
    <Path>namespacelog.html</Path>
    <Anchor>a980b268fc3ec194b35ea6fa22e3e082e</Anchor>
    <Abstract>String for formatting log records. </Abstract>
    <DeclaredIn>log.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>natives</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Abstract>DVM Native Operations. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Void</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a0347dd8cdda0fb96d131fad5e32ec064</Anchor>
    <Abstract>Return the DVM void type. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Bool</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a24c16658ab2058e0230063b97ee8de09</Anchor>
    <Abstract>Create a DVM Boolean. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Int</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a4e61c994835b8759410a798acbbd8a1e</Anchor>
    <Abstract>Create a DVM Integer. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Float</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ac4513da155bca2064f5e63b8ae9a667f</Anchor>
    <Abstract>Create a DVM Float. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_String</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>af04b34115cdd45ae74ef9eafa0d0dac9</Anchor>
    <Abstract>create a DVM String </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_Array</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aed55008480d45b53b15b2725fdb29735</Anchor>
    <Abstract>Create a DVM Array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_tuple</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a6b3709427de8b87be49d3ffcd3f41cb8</Anchor>
    <Abstract>Create a DVM Tuple. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_noOp</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>afb0270ed66574a9cc50b2b27bdbaf85c</Anchor>
    <Abstract>Do nothing. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_isVoid</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a241533cdc1e8aabdc5d4914b84659c24</Anchor>
    <Abstract>See if the element is void. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_equals</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a598a792f4f27f5f303db9bd1fe54b8cf</Anchor>
    <Abstract>Check if 2 elements are equal. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_notEqual</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a02ebd57a3d4c03dc22899c81d710cebf</Anchor>
    <Abstract>Check if 2 elements are not equal. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_and</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ad9af42003b8677c6e6ecfe3545dcfabc</Anchor>
    <Abstract>Logical and. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_or</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a487ae9e928c22ec16df1269cde8f6083</Anchor>
    <Abstract>Logical Or. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_xor</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ac379fbaba75e081ea9b8a715c711353b</Anchor>
    <Abstract>Logical xor. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_not</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a1934feed6f04c3d65363f4bdab42248b</Anchor>
    <Abstract>Negation. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_neg</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a833d2b610bb87309d5f921a66b65349c</Anchor>
    <Abstract>Negation. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_add</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a02049f1feebcffefe7962b4fb083d6c7</Anchor>
    <Abstract>Addition. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_sub</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ab456d991b7ede8c8d839657265d4bf9e</Anchor>
    <Abstract>Subtraction. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_mul</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a0963bf8d2e39650c9beb004640ed4032</Anchor>
    <Abstract>Multiplication. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_div</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>adaa5098622415dfccbf95a6fef897c6e</Anchor>
    <Abstract>Subtraction. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_floor</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a1984781826a8f1c4e277cade7609fd2d</Anchor>
    <Abstract>Round down. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_ceil</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a0d6c1c7fbb5d0de60bdc4d73c2c3c57e</Anchor>
    <Abstract>Round up. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_min</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>af35b6b8d5fd0d2f374885917968a5af9</Anchor>
    <Abstract>Maximum. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_max</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>abb4478539499c3865ea8ab4c637c1357</Anchor>
    <Abstract>Minimum. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_less</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a47b86188716c4b89474a9f61e9723f6b</Anchor>
    <Abstract>Smaller than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_more</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ad363436b9b598e2e6e50e8a4642fcdd5</Anchor>
    <Abstract>Greater than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_less_eq</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a52843e68814acab8de57cb3c7fadc938</Anchor>
    <Abstract>Smaller or equal than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_more_eq</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a21ba0876b51613717ae31897f182568f</Anchor>
    <Abstract>Greatar or equal than. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_contains</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a8e157c1a2fe878bb396c1f31060fa46f</Anchor>
    <Abstract>See if a string contains a value. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_find</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a477140509fd9d05fff6c6dde1e47b67c</Anchor>
    <Abstract>Return the idx of x in str. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_upper</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ae974ce37d8ff02e6365a0693f40d2211</Anchor>
    <Abstract>Conver a string to upper case. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_lower</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a762f15e633aeee7cd254d69b1ea8539d</Anchor>
    <Abstract>Conver a string to lower case. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_sub</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a25c53d60625c55a721f63a819d1544c2</Anchor>
    <Abstract>Get a substring. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_reverse</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aff52c3d475d1684b651e3c5a94516368</Anchor>
    <Abstract>Reverse a string. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_str_append</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a2b6809008cdd1dd601f5d74f9693e37f</Anchor>
    <Abstract>Append 2 strings. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_isEmpty</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a078294ea31372ab0dbcc2386c3c5cf5f</Anchor>
    <Abstract>See if an array is empty. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_length</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ab4d313f7f69e1a0f25ccc1f70386979d</Anchor>
    <Abstract>Get the length of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_empty</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>acf26b1de8845f072eb27dd89f2f163c2</Anchor>
    <Abstract>Create an empty array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_create</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a222b597973b736d6e3421d68e99db250</Anchor>
    <Abstract>Create an array filled with an element. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_get</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ae6df364d41ad69e2557253b7cc6570ba</Anchor>
    <Abstract>Get an element from the array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_set</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>ae9f4dbd73cbc45700efc9fceff0c8d15</Anchor>
    <Abstract>Create a new array with a different element at idx. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_insert</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>af1035915155c3d811f71d5b0fe21b92e</Anchor>
    <Abstract>Insert elements into an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_replace</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a44c4b28857e9355a4ede1ec6eea380c4</Anchor>
    <Abstract>Replace elements in an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_catenate</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aabc798c93f8ca42270e94fb7a91c6a1f</Anchor>
    <Abstract>Array concatenation. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_add_front</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>aecd072979a8a6929ca0228990e24bfaa</Anchor>
    <Abstract>Add an element to the start of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_add_back</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a1386b2f1dd931140e6e316a8d1cf304f</Anchor>
    <Abstract>Add an element to the back of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_arr_sub</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a220fa9b2fdd9f0c3abe88fbd13cf3c5d</Anchor>
    <Abstract>Get a subset of an array. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dvm_tup_get</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>a9c427a29c131341dd518e43090dfea94</Anchor>
    <Abstract>Access an element of a tuple. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operations</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>natives</Scope>
    </TokenIdentifier>
    <Path>namespacenatives.html</Path>
    <Anchor>afec9c8802e439b4aa0e432c18411a5f5</Anchor>
    <Abstract>Contains references to all the operations. </Abstract>
    <DeclaredIn>natives.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>python</APILanguage>
      <Type>ns</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Abstract>DIS parser. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>evalLit</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a08aeed13e7f3aa8263fd491abb48b6be</Anchor>
    <Abstract>Parse a literal string. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a7b8d23d7bcbb7065fdcced37d5c7b461</Anchor>
    <Abstract>Create a sink. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createStop</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a30ddba6e3e6fcb02f5fb4f4bc4840772</Anchor>
    <Abstract>Create a stop instruction. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createStart</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>ab7a5fd94b4a8dbcbff3be11dfd6d13f1</Anchor>
    <Abstract>Create a start instruction. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createContextChange</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a781d4f0b3d1d7c56d5fd02bb3ecb47c3</Anchor>
    <Abstract>Create a context change instruction. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createContextRestore</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a492fa7ea038cfe45fa32a71e85d25c27</Anchor>
    <Abstract>Create a context restore. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createOperation</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a54792d77f1b24a49d36ef7f44721a581</Anchor>
    <Abstract>Create an operation. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseInst</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a4f4c9dc2cb35f7e50c14018124d47ade</Anchor>
    <Abstract>Parse an instruction declaration. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseChunk</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>ad2a6cdad4d073bf680c47ee61c280ba6</Anchor>
    <Abstract>Parse a chunk declaration. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLit</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a5fc0d76c4ec00f5778d0baec95bf9d67</Anchor>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLink</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a354881061ece79f80981fa712f5e76ba</Anchor>
    <Abstract>Parse a link statement. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parseLine</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a3cb761d2bc030e9ef2eb698408863be3</Anchor>
    <Abstract>Parse a single DIS line. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse</Name>
      <APILanguage>python</APILanguage>
      <Type>func</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a87ff76bbd5ab3c200bb0532c04afee95</Anchor>
    <Abstract>Parse a dis string. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a1e69d2d56b67ae274d1d7f2f11633359</Anchor>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chunk</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>aa64d6b999bc20e4cd80f35ece2aee2fe</Anchor>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>instructions</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a8fabca7c8ec80f893e52c546adfb7a34</Anchor>
    <Abstract>Defines the operation codes and the functions to create them. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>functions</Name>
      <APILanguage>python</APILanguage>
      <Type>data</Type>
      <Scope>read</Scope>
    </TokenIdentifier>
    <Path>namespaceread.html</Path>
    <Anchor>a08937222a213e2af5ca289687b490b71</Anchor>
    <Abstract>Functions to parse the various statements. </Abstract>
    <DeclaredIn>read.py</DeclaredIn>
  </Token>
</Tokens>
